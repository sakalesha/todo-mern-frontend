{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ronad\\\\OneDrive\\\\Desktop\\\\Projects\\\\MERN\\\\todo-mern\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [backendMsg, setBackendMsg] = useState('');\n\n  // Function to fetch from backend\n  const fetchBackend = async () => {\n    try {\n      // This assumes your backend runs on localhost:5000\n      const res = await fetch('http://localhost:5000/');\n      const text = await res.text();\n      setBackendMsg(text);\n    } catch (error) {\n      setBackendMsg('Failed to connect to backend.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MERN Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchBackend,\n      children: \"Fetch from backend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: backendMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ruWcLtM5luQ+CifOx0DYDXp3hzU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","backendMsg","setBackendMsg","fetchBackend","res","fetch","text","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ronad/OneDrive/Desktop/Projects/MERN/todo-mern/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [backendMsg, setBackendMsg] = useState('');\n\n  // Function to fetch from backend\n  const fetchBackend = async () => {\n    try {\n      // This assumes your backend runs on localhost:5000\n      const res = await fetch('http://localhost:5000/');\n      const text = await res.text();\n      setBackendMsg(text);\n    } catch (error) {\n      setBackendMsg('Failed to connect to backend.');\n    }\n  };\n\n  return (\n    <div>\n      <h1>MERN Todo App</h1>\n      <button onClick={fetchBackend}>Fetch from backend</button>\n      <p>{backendMsg}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;MACjD,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAI,CAAC,CAAC;MAC7BJ,aAAa,CAACI,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,aAAa,CAAC,+BAA+B,CAAC;IAChD;EACF,CAAC;EAED,oBACEJ,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBd,OAAA;MAAQe,OAAO,EAAEV,YAAa;MAAAK,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1Dd,OAAA;MAAAU,QAAA,EAAIP;IAAU;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAACZ,EAAA,CAtBQD,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAwBZ,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}